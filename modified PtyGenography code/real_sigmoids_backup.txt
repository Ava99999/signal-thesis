# real sigmo√Ød functions

# fit a smooth sigmoid to a threshold min/max function
def sigmoid(x, L, x0, k, b):
    y = L / (1 + np.exp(-k*(x-x0))) + b
    return y

def sigmoid_derivative(x, L, x0, k, b):
    y = (L * np.exp(-k*(x - x0))) / ((1 + np.exp(-k*(x - x0)))**2)
    return y

def fit_sigmoid_param(x,p,q):
    ''' 
    Fits the parameters of a sigmoid curve to data.
    '''
    ini_guess = [q, 1, 1, p]
    Gmax = np.clip(np.abs(z),p,q)
    popt, _     = curve_fit(sigmoid, x, Gmax, p0=ini_guess, method='dogbox')
    return popt

def fit_sigmoid(x,p,q):
    '''
    Makes sigmoid from fitted parameters (due to dependency on data for G_smooth and need same parameters for Jacobian)
    '''
    popt = fit_sigmoid_param(x,p,q)
    return sigmoid(x,*popt)

def smooth_Jac(x, p, q):
    popt = fit_sigmoid_param(x,p,q)
    d = sigmoid_derivative(x, *popt)
    return np.diag(d)


p           = 0.5
q           = 1
G_smooth    = lambda z : fit_sigmoid(z,p,q)